'''
Created on Apr 22, 2014

@author: sethjn
'''

import playground
import sys, time
from twisted.web import server, resource
from twisted.web.server import NOT_DONE_YET
from twisted.internet import reactor
import cgi, os, struct

class MIBHTMLClient(resource.Resource):
    isLeaf = True
    
    def __init__(self, accessCode, playgroundServer=("localhost",9000)):
        self.__accessCode = accessCode
        self.__myAddress = playground.network.common.PlaygroundAddress(20141, 0, 9, 1)
        self.__pgClient = playground.network.client.ClientBase(self.__myAddress)
        self.__playgroundServer = playgroundServer
        self.__webserverPort = None
        self.__pendingRequests = {}
        
    def __htmlTemplate(self, body=None, head=None, frame=False):
        template = "<HTML>\n"
        template += "<HEAD>\n"
        if head:
            template += head + "\n"
        template += "</HEAD>\n"
        template += "<BODY>\n"
        if not frame:
            template += "<B>Playground Network Management Information Base</B><BR>\n"
            template += "<UL><TABLE>\n"
            template += "<TR><TD><I>Playground Server</I>:</TD><TD>%s/%d</TD></TR>\n" % (self.__playgroundServer[0], self.__playgroundServer[1])
            template += "<TR><TD><I>MIB Client Playground Address</I>:</TD><TD>%s</TD></TR>\n" % str(self.__myAddress)
            template += "<TR><TD><I>Current Time</I>:</TD><TD>%s</TD></TR>\n" % time.ctime()
            template += "</TABLE></UL>\n"
            template += "<HR>\n"
        template += "[[BODY_TAG]]\n"
        if not frame:
            template += '<BR><BR><A HREF="/%d/">Go Home</A>\n' % self.__accessCode
            template += "<HR>\n"
            template += "<I>Generated by SJN's MIB HTML Client</I>\n"
        template += "</BODY></HTML>\n"
        if body:
            template = template.replace("[[BODY_TAG]]", body)
        return template
        
    def __connectWebServer(self):
        site = server.Site(self)
        reactor.listenTCP(self.__webserverPort, site)
        
    def start(self, webserverPort):
        self.__webserverPort = webserverPort
        self.__pgClient.runWhenConnected(self.__connectWebServer)
        self.__pgClient.connectToPlaygroundServer(*self.__playgroundServer)
        
    def __listServers(self, request):
        self.__pgClient.sendMIB("server",None, "playground.network.server.CurrentConnections",[], 
                                lambda success, results: self.__renderServers(request, success, results))
        return NOT_DONE_YET
    
    def __renderServers(self, request, success, results):
        bodyStr = "Servers Currently Running on Playground Network<BR>\n"
        if success:
            bodyStr += "(Linked if queryable for MIB's)<BR>\n"
            bodyStr += "<OL>\n"
            bodyStr = '  <LI> <A HREF="/%d/mibserver_server">Playground Server</A>\n' % self.__accessCode
            
        else:
            bodyStr += "<B><I>INTERNAL ERROR</I></B><BR>\n"
            bodyStr += "<OL>\n"
        for r in results:
            r = cgi.escape(r)
            playgroundAddr = r[:r.find(" ")]
            if playgroundAddr.startswith("20141.0."):
                bodyStr += '  <LI> <A HREF="/%d/%s">%s</A>\n' % (self.__accessCode, "mibserver_"+playgroundAddr, r)
            else:
                bodyStr += '  <LI>' + r
        bodyStr += "</OL>\n"
        try:
            request.write(self.__htmlTemplate(bodyStr))
            request.finish()
        except:
            pass
        
    def __listMibs(self, request, addr):
        self.__pgClient.sendMIB(addr, 9, "__builtin__.GET_LOADED_MIBS",[], 
                                lambda success, results: self.__renderMibs(request, addr, success, results))
        return NOT_DONE_YET
        
    def __renderMibs(self, request, addr, success, results):
        bodyStr = "MIBS available on [%s]<BR>\n" % addr
        if not success:
            bodyStr += "<B><I>INTERNAL ERROR</I></B><BR>\n"
        bodyStr += "<OL>\n"
        for r in results:
            r = cgi.escape(r)
            bodyStr += '  <LI> <A HREF="/%d/%s/%s">%s</A>\n' % (self.__accessCode, "mibserver_"+addr, r, r)
        bodyStr += "</OL>\n"
        try:
            request.write(self.__htmlTemplate(bodyStr))
            request.finish()
        except:
            pass
        
    def __getMib(self, request, addr, mib):
        mibID = self.__pgClient.sendMIB(addr, 9, mib, [], 
                                lambda success, results: self.__mibResponse(addr, mibID, success, results))
        mibID = str(mibID)
        if not self.__pendingRequests.has_key(addr):
            self.__pendingRequests[addr] = {}
        self.__pendingRequests[addr][mibID] = [time.time()]
        iframe = '<iframe style="overflow:hidden;height:50%;width:100%" height="50%" width="100%" '
        iframe += 'marginwidth="0" marginheight="0" '
        iframe += 'scrolling="yes" frameborder=0 src="/%d/mibserver_%s/response/%s/%s"></iframe>' % (self.__accessCode, addr, mib, mibID)
        reactor.callLater(60*5, lambda: self.__clearRequest(addr, mibID))
        return self.__htmlTemplate(iframe)
    
    def __clearRequest(self, addr, mibID):
        if self.__pendingRequests[addr].has_key(mibID):
            del self.__pendingRequests[addr][mibID]
    
    def __mibResponse(self, addr, mibID, success, results):
        if not self.__pendingRequests.has_key(addr) or not self.__pendingRequests[addr].has_key(mibID):
            return
        self.__pendingRequests[addr][mibID].append((success, results)) 
    
    def __renderMibResponse(self, addr, mibRequested, mibID):
        if not self.__pendingRequests.has_key(addr):
            return self.__htmlTemplate("<B><I>Internal Error</I></B>: No mib response for [%s]" % addr, frame=True)
        if not self.__pendingRequests[addr].has_key(mibID):
            return self.__htmlTemplate("No Pending Response for %s... possibly an old mib request?"%mibID, frame=True)
        issueTime = self.__pendingRequests[addr][mibID][0]
        refresh =  time.time()-issueTime < 30
        bodyStr = "MIB [%s] response from [%s]:<BR>\n" % (mibRequested, addr)
        bodyStr += "(Auto-refresh for 30 seconds to gather all responses)<BR>\n"
        successfulResults = []
        failureInfo = []
        for success, results in self.__pendingRequests[addr][mibID][1:]:
            for r in results:
                r = "<PRE>\n"+cgi.escape(r)+"</PRE>"
                if success: successfulResults.append(r)#cgi.escape(r))
                else: failureInfo.append(r)#cgi.escape(r))
        if successfulResults:
            bodyStr += "<BR><U>MIB SERVER RESPONSES:</U>\n"
            bodyStr += "<OL>\n"
            for r in successfulResults:
                bodyStr += "<LI>" + r + "\n"
            bodyStr += "</OL>\n"
        if failureInfo:
            bodyStr += "<BR><U>MIB SERVER ERROR RESPONSES:</U>\n"
            bodyStr += "<OL>\n"
            for r in failureInfo:
                bodyStr += "<LI>" + r + "\n"
            bodyStr += "</OL>\n"
        if refresh:
            refreshTime = ((len(successfulResults) + len(failureInfo)) > 0) and 10 or 1
            return self.__htmlTemplate(head='<meta http-equiv="refresh" content="%d">' % refreshTime,
                                   body=bodyStr, frame=True)
        return self.__htmlTemplate(body=bodyStr, frame=True)
    
    def render_GET(self, request):
        path = request.postpath
        if len(path) == 0 or path[0] != str(self.__accessCode):
            return "<HTML><BODY><H1>UNAUTHORIZED</H1></BODY></HTML>"
        path = path[1:]
        if len(path) > 0:
            if path[0] == "":
                return self.__listServers(request)
            elif path[0].startswith("mibserver_"):
                prefixLen = len("mibserver_")
                addr = path[0][prefixLen:]
                if len(path) == 1: 
                    return self.__listMibs(request, addr)
                elif len(path) == 2:
                    return self.__getMib(request, addr, path[1])
                elif len(path) == 4 and path[1].lower() == "response":
                    mibRequested = path[2]
                    mibID = path[3]
                    return self.__renderMibResponse(addr, mibRequested, mibID)
            
        return self.__htmlTemplate("Unknown Request '%s'" % "/".join(path))
    
if __name__ == "__main__":
    randBytes = os.urandom(8)
    accessCode = struct.unpack("Q",randBytes)[0]
    print "Starting MIBHTMLClient with accessCode", accessCode
    client = MIBHTMLClient(accessCode)
    client.start(9001)